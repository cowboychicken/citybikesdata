# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---

services:
  dashboard:
    image: metabase/metabase
    container_name: dashboard
    ports:
      - "3000:3000"

  warehouse:
    image: postgres:13
    container_name: warehouse
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 300s
      retries: 5
    restart: always
    ports:
      - "5439:5432"
  
  apache:
    image: httpd:latest
    container_name: apache
    restart: always
    volumes:
      - ./website:/usr/local/apache2/htdocs
    ports:
      - "80:80"

  pipelinerunner:
    image: pipelinerunner
    container_name: pipelinerunner
    build:
      context: ./
      dockerfile: ./containers/pipelinerunner/Dockerfile
    volumes:
      - ./:/code
    environment:
      WAREHOUSE_USER: ${POSTGRES_USER}
      WAREHOUSE_PASSWORD: ${POSTGRES_PASSWORD}
      WAREHOUSE_DB: ${POSTGRES_DB}
      WAREHOUSE_HOST: ${POSTGRES_HOST}
      WAREHOUSE_PORT: ${POSTGRES_PORT}
